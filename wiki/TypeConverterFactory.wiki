#summary Example of a TypeConverterFactory

= Introduction =

This is an example type converter factory that produces a converter for any class implementing a certain interface.

= Details =

Lets say we have a lot of objects that implement a given interface.  We would like to have the serializer pick up any class implementing that interface and convert it to another representation and then serialize it, without having to register each class with a type converter.  This is a good case for a type converter factory.  Here's a sample interface for an object that is retrieved from a database, all we really need to store is the key and not the properties.  Everything else should come from the database.
{{{
  public interface IDbObject {
      string Key { get; set }
      void Load();
  }
}}}

And here's a type converter that can convert it for us.  We really just need to store the key to get the object back from the database, so we'll serialize the object to a string.
{{{
    public class DbObjectConverter : IJsonTypeConverter
    {


        public Type GetSerializedType(Type sourceType) {
            // we will convert to a string
            return typeof(string);
        }

        /// <summary>
        /// This method is called before serialization.          
        /// </summary>
        public object ConvertFrom(object item, SerializationContext serializationContext) {
            IDbObject db = (IDbObject) item;
            return db.Key;
        }

        /// <summary>
        /// This method will be called upon deserialization.  
        /// </summary>
        public object ConvertTo(object item, Type sourceType, SerializationContext serializationContext) {
            // create the right type
            IDbObject db = (IDbObject) Activator.CreateInstance(sourceType);
            // we serialized the object to its key, so set the key property from the item coming in
            db.Key = (string) item;
            // load the object from the database
            db.Load();
            return db;
        }
        public object Context { 
           set{ return;  // no context object needed}
        }
    }
}}}


Now that we have a converter that can convert any object of type IDbObject, we build the type converter factory.
{{{
    public class DbObjectConverterFactory : ITypeConverterFactory
    {
 
        // One converter can service all the objects
        private DbObjectConverter _converter;

        public IJsonTypeConverter GetConverter(PropertyInfo forProperty) {
           // don't support properties
           return null;
        }

        public IJsonTypeConverter GetConverter(Type forType) {
           if (_converter == null) {
               _converter = new DbObjectConverter();
           }
           return _converter;
        }
        
        public bool HasConverter(Type forType) {
           // see if it implements IDbObject
           return typeof(IDbObject).IsAssignableFrom(forType);
        }

        public bool HasConverter(PropertyInfo forProperty) {
           // don't support properties
           return false;
        }

        SerializationContext SerializationContext { 
          set { return;  // don't need the context }
        }
    }
}}}

And then finally to register the factory
{{{
    Serializer s = Serializer.GetSerializer(typeof(SomeObject));
    s.Context.AddTypeConverterFactory(new DbObjectConverterFactory());
}}}