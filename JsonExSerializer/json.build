<project name="JsonExSerializer nant build file" default="rebuild">
    <property name="configuration" value="release" overwrite="false" />
    <property name="name" value="JsonExSerializer" />
	<property name="tests" value="JsonExSerializerTests" />
	<property name="solution" value="${name}.sln" />
	<property name="svn.info.log" value="svn.version.txt" />
	<property name="major.version" value="1" />
	<property name="minor.version" value="4" />
	<property name="revision.version" value="0" />
	<property name="info.version" value="${major.version}.${minor.version}" />
	<property name="main.output.dir" value="${name}/bin/${configuration}" />
	<property name="test.output.dir" value="${tests}/bin/${configuration}" />
	
	<target name="get-head-revision"> 
	  <exec
	    program="svn.exe"
	    commandline="info ${solution} -r HEAD"
	    output="${svn.info.log}"
	    resultproperty="svn.head.revision"
	    />
	         
	  <!-- Load the content of the file in property svn.head.revision -->
	  <loadfile property="svn.head.revision" file="${svn.info.log}" />
	    
	  <!-- Look for the 'vision: ' string -->
	  <property name="index.of.revision" value="${string::index-of(svn.head.revision, 'Revision: ')}" />

	  <!-- Make sure we have found the index of the substring -->
	  <if test="${bool::parse(int::parse(index.of.revision) != -1)}">
	   
	    <property name="build.version" value="${string::substring(svn.head.revision, int::parse(index.of.revision) + 10, 2)}" verbose="true"/>
		<property name="full.version" value="${major.version}.${minor.version}.${revision.version}.${build.version}" />
		<property name="build.dir" value="build/${name}-${full.version}" />
	    <delete file="${svn.info.log}" />
	    
	    <echo message="Rev: ${build.version}"/>    
	 
	  </if>                         
	</target>
	
	<target name="assembly-info" depends="get-head-revision">
		<asminfo output="JsonExSerializer/Properties/AssemblyInfo.cs" language="CSharp">
		    <imports>
		        <import namespace="System" />
		        <import namespace="System.Reflection" />
		        <import namespace="System.Runtime.CompilerServices" />
		        <import namespace="System.Runtime.InteropServices" />
		    </imports>
		    <attributes>
		        <attribute type="AssemblyTitleAttribute" value="${name}" />
		        <attribute type="AssemblyDescriptionAttribute" value=".NET Serialization Framework using JSON" />
		        <attribute type="AssemblyProductAttribute" value="${name}" />
		        <attribute type="AssemblyCopyrightAttribute" value="Copyright (c) 2007" />
		        <attribute type="ComVisibleAttribute" value="false" />
				<attribute type="GuidAttribute" value="12d697c6-ebf8-479f-b78a-86fdf09307d0" />
		        <attribute type="CLSCompliantAttribute" value="true" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${info.version}" />
				<attribute type="AssemblyVersionAttribute" value="${full.version}" />
				<attribute type="AssemblyFileVersionAttribute" value="${full.version}" />	
		    </attributes>
		</asminfo>
		<asminfo output="JsonExSerializerTests/Properties/AssemblyInfo.cs" language="CSharp">
		    <imports>
		        <import namespace="System" />
		        <import namespace="System.Reflection" />
		        <import namespace="System.Runtime.CompilerServices" />
		        <import namespace="System.Runtime.InteropServices" />
		    </imports>
		    <attributes>
		        <attribute type="AssemblyTitleAttribute" value="JsonExSerializerTests" />
		        <attribute type="AssemblyDescriptionAttribute" value=".NET Serialization Framework Tests using JSON" />
		        <attribute type="AssemblyProductAttribute" value="${name}" />
		        <attribute type="AssemblyCopyrightAttribute" value="Copyright &#169; 2007" />
		        <attribute type="ComVisibleAttribute" value="false" />
				<attribute type="GuidAttribute" value="041b67d7-8bf6-4867-ba57-bc8dc556cbc6" />
		        <attribute type="CLSCompliantAttribute" value="false" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${info.version}" />
				<attribute type="AssemblyVersionAttribute" value="${full.version}" />
				<attribute type="AssemblyFileVersionAttribute" value="${full.version}" />	
		    </attributes>
		</asminfo>
	</target>
    <target name="clean" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <include name="**/bin/**" />
                <include name="**/obj/**" />
             </fileset>
        </delete>
		<delete dir="build" />
    </target>
        
    <target name="rebuild" depends="clean, build" />

    <target name="compile" depends="assembly-info">
        <solution configuration="${configuration}">
        </solution>
		<exec program="msbuild"
			commandline='"${solution}" /v:q /nologo /p:Configuration=${configuration}' />
        <property name="expected.output" value="${main.output.dir}/JsonExSerializer.dll"/>
        <fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
    </target>
    
	<target name="copy-outputs" depends="compile">
		<copy todir="${build.dir}">
			<fileset basedir="${main.output.dir}">
				<include name="JsonExSerializer.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${test.output.dir}">
				<include name="${tests}.dll" />
				<include name="${tests}.pdb" />
			</fileset>
		</copy>
	</target>
	
  <target name="documentation" depends="compile">
    <exec program="doxygen" />
	<!-- move files into build specific directory -->
	<move todir="${build.dir}/docs">
	    <fileset basedir="build/docs">
	        <include name="**" />
	    </fileset>
	</move>
	<delete dir="build/docs" />
  </target>
  
  <target name="copy-src">
	<copy todir="${build.dir}/src">
		<fileset basedir=".">
			<include name="${solution}" />
			<include name="license.txt" />
			<include name="JsonExSerializer/**" />
		    <exclude name="**/bin/**" />
		    <exclude name="**/obj/**" />
		    <exclude name="**/Release/**" />
		    <exclude name="**/Debug/**" />
		    <exclude name="**/*.user" />
		    <exclude name="**/*.suo" />
		    <exclude name="**/*.zip" />
		</fileset>
	</copy>
	<copy todir="${build.dir}/src">
		<fileset basedir=".">
			<include name="JsonExSerializerTests/**" />
		    <exclude name="**/bin/**" />
		    <exclude name="**/obj/**" />
		    <exclude name="**/Release/**" />
		    <exclude name="**/Debug/**" />
		    <exclude name="**/*.user" />
		    <exclude name="**/*.suo" />
		    <exclude name="**/*.zip" />
		</fileset>
	</copy>	
  </target>
  <target name="zip" depends="copy-outputs, documentation, copy-src">
	<zip zipfile="${name}-${full.version}.zip">
	    <fileset basedir="${build.dir}">
	        <include name="**/*" />
	    </fileset>
	</zip>
  </target>
  <target name="build" depends="compile, zip" />
</project>