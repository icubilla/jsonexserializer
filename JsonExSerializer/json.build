<project name="JsonExSerializer nant build file" default="rebuild">
    <property name="configuration" value="release" overwrite="false" />
    <property name="name" value="JsonExSerializer" />
	<property name="tests" value="JsonExSerializerTests" />
	<property name="perf.tests" value="PerformanceTests" />
	<property name="solution" value="${name}.sln" />
	<property name="svn.info.log" value="svn.version.txt" />
	<property name="versionfile" value="version.txt" />
	<property name="revision.version" value="1" />	
	<property name="main.output.dir" value="${name}/bin/${configuration}" />
	<property name="test.output.dir" value="${tests}/bin/${configuration}" />
	<property name="perf.test.output.dir" value="${perf.tests}/bin/${configuration}" />
	<property name="run.perf.tests" value="true" />
	
	<target name="get-major-version">
		<loadfile property="info.version" file="${versionfile}" />
	</target>
	
	<target name="get-head-revision" depends="get-major-version"> 
	  <exec
	    program="svn.exe"
	    commandline="info ${solution} -r HEAD"
	    output="${svn.info.log}"
	    resultproperty="svn.head.revision"
	    />
	         
	  <!-- Load the content of the file in property svn.head.revision -->
	  <loadfile property="svn.head.revision" file="${svn.info.log}" />
	    
	  <!-- Look for the 'vision: ' string -->
	  <property name="index.of.revision" value="${string::index-of(svn.head.revision, 'Revision: ')}" />

	  <!-- Make sure we have found the index of the substring -->
	  <if test="${bool::parse(int::parse(index.of.revision) != -1)}">
	   
	    <property name="build.version" value="${string::substring(svn.head.revision, int::parse(index.of.revision) + 10, 3)}" verbose="true"/>
		<property name="full.version" value="${info.version}.${revision.version}.${build.version}" />
		<property name="build.dir" value="build/${name}-${full.version}" />
	    <delete file="${svn.info.log}" />
	    
	    <echo message="Rev: ${build.version}"/>    
	 
	  </if>                         
	</target>

	<target name="assembly-info" depends="get-head-revision">
		<update-assembly-version version="${full.version}" file-version="${full.version}" info-version="${info.version}" file="JsonExSerializer/Properties/AssemblyInfo.cs" />
		<update-assembly-version version="${full.version}" file-version="${full.version}" info-version="${info.version}" file="JsonExSerializerTests/Properties/AssemblyInfo.cs" />
	</target>

    <target name="clean" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <include name="**/bin/**" />
                <include name="**/obj/**" />
             </fileset>
        </delete>
		<delete dir="build" />
    </target>
        
    <target name="rebuild" depends="clean, build" />

    <target name="compile" depends="assembly-info">
        <solution configuration="${configuration}">
        </solution>
		<exec program="msbuild"
			commandline='"${solution}" /v:q /nologo /p:Configuration=${configuration}' />
        <property name="expected.output" value="${main.output.dir}/JsonExSerializer.dll"/>
        <fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
    </target>
    
	<target name="copy-outputs" depends="compile">
		<copy todir="${build.dir}">
			<fileset basedir="${main.output.dir}">
				<include name="JsonExSerializer.*" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${test.output.dir}">
				<include name="${tests}.dll" />
				<include name="${tests}.pdb" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset basedir="${perf.test.output.dir}">
				<include name="${perf.tests}.exe" />
				<include name="${perf.tests}.pdb" />
			</fileset>
		</copy>
		
	</target>
	
  <target name="documentation" depends="compile">
    <exec program="doxygen" />
	<!-- move files into build specific directory -->
	<move todir="${build.dir}/docs">
	    <fileset basedir="build/docs">
	        <include name="**" />
	    </fileset>
	</move>
	<delete dir="build/docs" />
  </target>
  
  <target name="copy-src">
	<copy todir="${build.dir}/src">
		<fileset basedir=".">
			<include name="${solution}" />
			<include name="license.txt" />
			<include name="JsonExSerializer/**" />
		    <exclude name="**/bin/**" />
		    <exclude name="**/obj/**" />
		    <exclude name="**/Release/**" />
		    <exclude name="**/Debug/**" />
		    <exclude name="**/*.user" />
		    <exclude name="**/*.suo" />
		    <exclude name="**/*.zip" />
		</fileset>
	</copy>
	<copy todir="${build.dir}/src">
		<fileset basedir=".">
			<include name="JsonExSerializerTests/**" />
		    <exclude name="**/bin/**" />
		    <exclude name="**/obj/**" />
		    <exclude name="**/Release/**" />
		    <exclude name="**/Debug/**" />
		    <exclude name="**/*.user" />
		    <exclude name="**/*.suo" />
		    <exclude name="**/*.zip" />
		</fileset>
	</copy>
	<copy todir="${build.dir}/src">
		<fileset basedir=".">
			<include name="PerformanceTests/**" />
		    <exclude name="**/bin/**" />
		    <exclude name="**/obj/**" />
		    <exclude name="**/Release/**" />
		    <exclude name="**/Debug/**" />
		    <exclude name="**/*.user" />
		    <exclude name="**/*.suo" />
		    <exclude name="**/*.zip" />
		</fileset>
	</copy>		
  </target>
  <target name="unit-tests" depends="compile">
      <mbunit
         report-types="Html"
         report-filename-format="unittests-${full.version}"
         report-output-directory="${build.dir}/testresults"
         halt-on-failure="true">
         <assemblies>
            <include name="${test.output.dir}/JsonExSerializerTests.dll" /> 
         </assemblies>
      </mbunit>
  </target>
  <target name="perf-tests" depends="compile" if="${run.perf.tests}">
	  <mkdir dir="${build.dir}/testresults/" />
	  <exec program="PerformanceTests.exe" basedir="${perf.test.output.dir}" output="${build.dir}/testresults/perf-test-results-${full.version}.txt">
	  </exec>
  </target>
  <target name="zip" depends="copy-outputs, documentation, copy-src, unit-tests, perf-tests">
	<zip zipfile="${name}-${full.version}.zip">
	    <fileset basedir="${build.dir}">
	        <include name="**/*" />
	    </fileset>
	</zip>
  </target>
  <target name="build" depends="compile, zip" />
  
  <script language="C#" prefix="json" >
       <code>
          <![CDATA[
            [TaskName("update-assembly-version")]
            public class UpdateAsmVersionTask : Task {

                  private string _version;
				  private string _fileVersion;
				  private string _infoVersion;
		          private string _file;	
				  
                  [TaskAttribute("version", Required=true)]
                  public string Version {
                      get { return _version; }
                      set { _version = value; }
                  }
                  [TaskAttribute("file-version", Required=true)]
                  public string FileVersion {
                      get { return _fileVersion; }
                      set { _fileVersion = value; }
                  }
                  [TaskAttribute("info-version", Required=true)]
                  public string InfoVersion {
                      get { return _infoVersion; }
                      set { _infoVersion = value; }
                  }
                  [TaskAttribute("file", Required=true)]
                  public string File {
                      get { return _file; }
                      set { _file = value; }
                  }

                  protected override void ExecuteTask() {
                      Log(Level.Info, "UdateAsmVersionTask");
                      Log(Level.Info, string.Format("version: {0}", Version));
                      Log(Level.Info, string.Format("file-version: {0}", FileVersion));
                      Log(Level.Info, string.Format("info-version: {0}", InfoVersion));
                      Log(Level.Info, string.Format("file: {0}", File));
					  
					  string contents = "";
					  using (TextReader reader = new StreamReader(File)) {
						  contents = reader.ReadToEnd();
						  Log(Level.Debug, "ContentsBefore=" + contents);
  						  contents = Replace(contents, "AssemblyInformationalVersionAttribute", InfoVersion);
   						  contents = Replace(contents, "AssemblyVersionAttribute", Version);
						  contents = Replace(contents, "AssemblyFileVersionAttribute", FileVersion);						  
						  Log(Level.Debug, "ContentsAfter=" + contents);
					  }
					  
					  if (!string.IsNullOrEmpty(contents)) {
					     using (TextWriter writer = new StreamWriter(File)) {
						     writer.Write(contents);
							 //writer.Flush();
							 //writer.Close();
						 }
					  }
                  }
				  
				  private string Replace(string input, string attributeName, string newVersion) {
					  if (string.IsNullOrEmpty(newVersion))
						  return input;
						  						  
				      string pattern = @"\b" + attributeName + @"\(\s*""([^""]+)""\s*\)";
					  string replacement = string.Format("{0}(\"{1}\")", attributeName, newVersion);
					  Regex r = new Regex(pattern);
					  return r.Replace(input, replacement);
				  }
                }
              ]]>
            </code>
        </script>
</project>
